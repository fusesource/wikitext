<?xml version="1.0" encoding="UTF-8"?>
<project name="functions" default="all" basedir=".">
	
 	<import file="get-dependencies.xml"/>

	<!-- ===================================================================== -->
	<!-- build targets -->
	<!-- ===================================================================== -->

	<target name="for-each-target">
		<invoke target="3.4"/>
		<invoke target="3.5"/>
		<invoke target="3.6"/>
	</target>

	<!-- ===================================================================== -->
	<!-- global properties -->
	<!-- ===================================================================== -->

	<available classname="java.lang.Enum" property="java.isVersion5OrHigher"/>
	
	<!-- ===================================================================== -->
	<!-- top-level targets -->
	<!-- ===================================================================== -->

	<target name="all" depends="clean,build,tests">
	</target>

	<target name="clean" depends="clean-update,clean-build,clean-tests,clean-results">
		<delete file="${build.timestamp}"/>
	</target>

	<target name="clean-build">
		<delete dir="${build.home}/workspace"/>
		<antcall target="for-each-target">
			<param name="call" value="clean-build-helper"/>
		</antcall>
	</target>

	<target name="clean-update">
		<antcall target="for-each-target">
			<param name="call" value="clean-update-helper"/>
		</antcall>
	</target>
	
	<target name="clean-results">
		<delete dir="${build.results}"/>
	</target>

	<target name="clean-tools">
		<antcall target="clean-basebuilder"/>
		<antcall target="for-each-target">
			<param name="call" value="clean-tools-helper"/>
		</antcall>
	</target>

	<target name="clean-tests">
		<antcall target="for-each-target">
			<param name="call" value="clean-tests-helper"/>
		</antcall>
	</target>

	<target name="build" depends="init-build,init">
		<antcall target="for-each-target">
			<param name="call" value="build-helper"/>
		</antcall>
	</target>

	<target name="tests" depends="eclipse-tests,swtbot-tests,performance-tests">
	</target>

	<target name="eclipse-tests" depends="init-tests">
		<antcall target="for-each-target">
			<param name="call" value="tests-helper"/>
			<param name="test.target" value="eclipse"/>
			<param name="test.plugin" value="${build.test.eclipse.plugin}"/>
			<param name="test.classname" value="${build.test.eclipse.suite}"/>
		</antcall>
	</target>

	<target name="performance-tests" depends="init-tests">
		<antcall target="for-each-target">
			<param name="call" value="tests-helper"/>
			<param name="test.target" value="performance"/>
			<param name="test.plugin" value="${build.test.performance.plugin}"/>
			<param name="test.classname" value="${build.test.performance.suite}"/>
		</antcall>
	</target>

	<target name="swtbot-tests" depends="init-tests">
		<antcall target="for-each-target">
			<param name="call" value="tests-helper"/>
			<param name="test.target" value="swtbot"/>
			<param name="test.plugin" value="${build.test.swtbot.plugin}"/>
			<param name="test.classname" value="${build.test.swtbot.suite}"/>
			<param name="skip3.4" value="true"/>
		</antcall>
	</target>

	<target name="standalone-tests" depends="init-tests">
		<antcall target="for-each-target">
			<param name="call" value="standalone-tests-helper"/>
		</antcall>
	</target>

	<target name="report" depends="test-report,performance-report">
	</target>

	<target name="test-report" depends="init">
		<antcall target="for-each-target">
			<param name="call" value="report-helper"/>
		</antcall>
	</target>
	
	<!-- for testing -->
	<target name="debug">
		<antcall target="for-each-target">
			<param name="call" value="debug-helper"/>
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- hook targets -->
	<!-- ===================================================================== -->

	<target name="pre-build">
	</target>

	<target name="post-build">
	</target>

	<target name="pre-tests">
	</target>

	<target name="post-tests">
	</target>

	<target name="pre-standalone-tests">
	</target>

	<target name="post-standalone-tests">
	</target>

	<target name="pre-report">
	</target>

	<target name="post-report">
	</target>

	<!-- ===================================================================== -->
	<!-- helper targets -->
	<!-- ===================================================================== -->

	<macrodef name="init-base-properties">
		<attribute name="activity"/>
		<attribute name="target" default="${base.target}"/>
		<sequential>			
			<condition property="activity.type" value="build"><equals arg1="@{activity}" arg2="build"/></condition>
			<condition property="activity.type" value="test"><equals arg1="@{activity}" arg2="test"/></condition>
			<fail unless="activity.type" message="Invalid activity: '@{activity}'"/>
			
			<!-- load properites named '$activity.*.$target' into 'base.*' namespace -->
			<propertyset id="base.properties.ref">
				<propertyref regex="@{activity}\..*@{target}"/>
				<mapper type="glob" from="@{activity}.*.@{target}" to="base.*"/>
			</propertyset>
			<property name="base.properties" refid="base.properties.ref"></property>
			<echo file="${build.home}/@{activity}.properties">${base.properties}</echo>
			<replace file="${build.home}/@{activity}.properties">
				<replacetoken>, </replacetoken>
				<replacevalue><![CDATA[
					]]></replacevalue>
			</replace>
			<property file="${build.home}/@{activity}.properties"/>
			<!--
			<condition property="base.version" value="${@{activity}.version.@{target}}"><isset property="@{activity}.version.@{target}"/></condition>
			<property name="base.version" value="${default.version}"/>
			<condition property="base.url" value="${@{activity}.url.@{target}}"><isset property="@{activity}.url.@{target}"/></condition>
			<condition property="base.sites" value="${@{activity}.sites.@{target}}"><isset property="@{activity}.sites.@{target}"/></condition>
			-->
			<property name="base.home" value="${tools.home}/${activity.type}-${base.version}"/>
		</sequential>		
	</macrodef>
	
    <macrodef name="init-base">
		<attribute name="activity"/>
		<attribute name="target" default="${base.target}"/>
        <sequential>
			<init-base-properties activity="@{activity}" target="@{target}"/>
			
			<available file="${base.home}/.provisioned" property="base.exists"/>
			<antcall target="provision-${activity.type}"/>
        </sequential>
    </macrodef>

    <macrodef name="init-basebuilder">
        <sequential>
        	<property name="base.builder.home" value="${tools.home}/basebuilder-${basebuilder.version}"/>
			<available file="${base.builder.home}/.provisioned" property="base.builder.exists"/>
			<antcall target="provision-basebuilder"/>
        </sequential>
    </macrodef>

	<macrodef name="invoke">
		<attribute name="target"/>
		<element name="params" implicit="true" optional="true"/>
		<sequential>
		    <condition property="skip@{target}"><not><contains string="${targets}" substring="@{target}"/></not></condition>
			<antcall target="run-target">
				<param name="base.target" value="@{target}"/>
				<propertyset>
					<propertyref prefix="skip@{target}"/>
					<mapper type="glob" from="skip@{target}" to="skip"/>
				</propertyset>
				<params/>
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="exec-eclipse">
		<attribute name="activity"/>
		<attribute name="application" default="org.eclipse.ant.core.antRunner" />
		<attribute name="extravmargs" default=""/>
		<attribute name="vmargs" default=" -Xms40m -Xmx512m -XX:MaxPermSize=128m"/>    	
		<attribute name="failonerror" default="true"/>
		<attribute name="timeout" default="10000000" />
		<attribute name="output" default="NOT SET" />
		<attribute name="consolelog" default="${consolelog}" />
		<element name="args" optional="true" implicit="true"/>
		<sequential>
			<init-basebuilder/>
			
			<mkdir dir="${build.results}" />
			<condition property="log" value="@{output}"><not><equals arg1="@{output}" arg2="NOT SET"/></not></condition>
			<condition property="log" value="${build.results}/@{activity}-${base.target}.log" else="${build.results}/@{activity}.log"><isset property="base.target"/></condition>
			
			<echo message="Executing @{activity} using basebuilder-${basebuilder.version}" />
			<echo message="Output is logged to ${log}" />			
			
			<!-- find the Eclipse launcher -->
			<pathconvert property="@{application}.launcher">
				<first count="1">
					<sort>
						<fileset dir="${base.builder.home}/eclipse/plugins" includes="**/org.eclipse.equinox.launcher*.jar" />
						<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
							<date />
						</reverse>
					</sort>
				</first>
			</pathconvert>

			<!-- launch the eclipse application -->
			<java fork="true" jar="${@{application}.launcher}" dir="." timeout="@{timeout}" failonerror="@{failonerror}"
					output="${log}">
				<!-- Uncomment to debug <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"/> -->
			    <jvmarg line="@{vmargs} @{extravmargs}"/>
		   		<!-- <arg value="-clean"/> -->
			    <arg value="-application"/>
		   		<arg value="@{application}"/>
				<arg value="-consolelog"/>
		   		<arg value="-data"/>
		   		<arg value="${build.home}/workspace"/>
				<args />
				<redirector alwayslog="@{consolelog}"/>
			</java>
		</sequential>
	</macrodef>

	<macrodef name="install-into-base">
		<attribute name="url"/>
		<attribute name="exists"/>
		<attribute name="unpackDest" default="${base.home}"/>
		<sequential>
			<!-- use unique name for property to avoid conflicts -->
			<basename property="file.@{url}" file="@{url}"/>
			<antcall target="getBundle">
				<param name="file" value="${file.@{url}}" />
				<param name="url" value="@{url}"/>
			</antcall>
			<antcall target="unpackBundle">
				<param name="file" value="${file.@{url}}" />
				<param name="unpackDest" value="@{unpackDest}"/>
				<param name="isUnpackedFile" value="${base.home}/@{exists}"/>
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="install-feature-into-base">
		<attribute name="featureId"/>
		<attribute name="updateSite" default="file:${build.home}/update-${base.target}"/>
		<sequential>
			<antcall target="install-bundle">
				<param name="featureId" value="@{featureId}" />
				<param name="updateSite" value="@{updateSite}"/>
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="extract-version">
		<attribute name="property"/>
		<attribute name="file"/>
		<sequential>
			<loadfile property="@{property}" srcFile="@{file}">
				<filterchain>
					<linecontains>
						<contains value="Bundle-Version: "/>
					</linecontains>
					<striplinebreaks/>
					<tokenfilter>
					      <filetokenizer/>
					      <replaceregex pattern="Bundle-Version: ([0-9.]*).qualifier"
					                    flags="s"
					                    replace="\1"/>
					</tokenfilter>
				</filterchain>
			</loadfile>
		</sequential>
	</macrodef>

	<target name="run-target" unless="skip">
		<echo>Running ${call} for ${base.target}</echo>
		<antcall target="${call}"/>
	</target>

	<target name="check-java" unless="java.isVersion5OrHigher">
		<fail message="Java 1.5 or higher required (${java.version} detected)"/>
	</target>

	<!-- for testing -->
	<target name="debug-helper">
		<init-base activity="build"/>
		<echo message="target: ${base.target}"/>
		<echo message="base.home: ${base.home}"/>
		<echo message="base.version: ${base.version}"/>
		<echo message="base.url: ${base.url}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- init targets -->
	<!-- ===================================================================== -->

	<target name="boot" depends="check-java">		
		<mkdir dir="${eclipse.base}"/>
		<mkdir dir="${build.home}"/>
		<mkdir dir="${build.results}"/>
		<tstamp>
			<format property="time" pattern="yyyyMMddHHmm" locale="en,US" timezone="UTC"/>
		</tstamp>
		<echo>Running on ${os.name} ${os.version} (${os.arch}) / ${build.system} / ${build.os}-${build.arch}-${build.ws}, ${ant.version}, Java ${ant.java.version}</echo>
	</target>

	<target name="init-timestamp" unless="qualifier">
		<tstamp>
			<format property="qualifier" pattern="'I'yyyyMMdd-HH00" locale="en,US" timezone="UTC"/>
		</tstamp>
		<echo message="qualifier=${qualifier}" file="${build.timestamp}"/>
	</target>

	<target name="init" depends="boot">		
		<property file="${build.timestamp}" />
		<fail message="No qualifier specified. Please run build first." unless="qualifier"/>
		<echo message="Building ${version}.${qualifier}" />
	</target>	

	<target name="init-build" depends="boot">		
		<property file="${build.timestamp}" />
		<antcall target="init-timestamp"/>
	</target>
	
	<target name="init-tests" depends="init">		
	</target>

	<target name="init-scripts">
		<chmod perm="755">
			<fileset dir="${basedir}/bin"/>
		</chmod>
	</target>

	<!-- ===================================================================== -->
	<!-- clean targets -->
	<!-- ===================================================================== -->

	<target name="clean-basebuilder">
		<property name="base.builder.home" value="${tools.home}/basebuilder-${basebuilder.version}"/>
		<delete dir="${base.builder.home}" />
	</target>
	
	<target name="clean-tools-helper">
		<antcall target="clean-build-tools-helper"/>
		<antcall target="clean-test-tools-helper"/>
	</target>

	<target name="clean-build-tools-helper">
		<init-base-properties activity="build"/>
		<delete dir="${base.home}" />
	</target>

	<target name="clean-test-tools-helper" unless="skipClean">
		<init-base-properties activity="test"/>
		<delete dir="${base.home}" />
	</target>

	<!-- ===================================================================== -->
	<!-- build targets -->
	<!-- ===================================================================== -->

	<!--- one time setup for test target environment -->
	<target name="provision-build" unless="base.exists">
		<!-- setup for download targets -->
		<property name="downloadsDir" value="${tools.home}"/> 

		<!-- extract sdk for building -->
		<mkdir dir="${base.home}" />
		<install-into-base url="${base.url}" exists="eclipse"/>
		
		<touch file="${base.home}/.provisioned"/>
	</target>
	
	<target name="clean-build-helper">
		<delete dir="${build.home}/${base.target}" />
	</target>

	<target name="build-helper-init">
		<init-base activity="build"/>
		
    	<property name="eclipse.home" value="${base.home}/eclipse" />
		<antcall target="build-helper-copy-maps"/>
		<available property="dependencies.build.exists" file="${basedir}/config/build-dependencies"/>
	</target>

	<target name="build-helper-copy-maps" unless="release">
		<copy todir="${build.home}/${base.target}/maps">
			<fileset dir="${basedir}/maps">
				<include name="*.map"/>
			</fileset>
		</copy>
	</target>
		
	<target name="install-build-dependencies" if="dependencies.build.exists" unless="skipUpdate">
  	    <antcall target="publish-feature">
  	    	<param name="feature" value="dependencies.build"/>
			<param name="version" value="1.0.0.${qualifier}"/>
			<param name="featureDir" value="${basedir}/config/build-dependencies"/>
		</antcall>
		<install-feature-into-base featureId="dependencies.build"/>
	</target>

	<target name="build-helper" depends="build-helper-init,install-build-dependencies,pre-build">
		<init-basebuilder/>
    	<path id="pde.build.script.id"> 
    		<fileset dir="${base.builder.home}/eclipse/plugins">
            	<include name="org.eclipse.pde.build_*/scripts/build.xml"/>
          	</fileset>
    	</path> 
    	<property name="pde.build.script" refid="pde.build.script.id"/>
		<property name="build.forceContextQualifier" value="-DforceContextQualifier=${qualifier}" />
		<condition property="build.skipFetch" value="-DskipFetch=true" else="-DnoSkipFetch=true"><equals arg1="${skipFetch}" arg2="true"/></condition>
		<property name="build.extraBuildArgs" value="" />
		<available property="builder" file="${basedir}/config/${base.target}" value="${basedir}/config/${base.target}"/>
		<property name="builder" location="${basedir}/config"/>

    	<exec-eclipse activity="build">
    		<arg value="-buildfile"/>
    		<arg value="${pde.build.script}"/>
    		<arg value="-DbaseTarget=${base.target}"/>    		
    		<arg value="-DbaseLocation=${eclipse.home}"/>    		
    		<arg value="-Dbuilder=${builder}"/>
    		<arg value="-DbuildDirectory=${build.home}/${base.target}"/>
    		<arg value="-DbuildLabel=${build.dist}"/>
    		<arg value="-DmajorVersion=${version}"/>
    		<arg value="${build.skipFetch}"/>
    		<arg line="${build.forceContextQualifier}"/>
    		<arg line="${build.extraBuildArgs}"/>
    	</exec-eclipse>
		
		<antcall target="post-build"/>
    </target>

	
	<!-- ===================================================================== -->
	<!-- test helper targets -->
	<!-- ===================================================================== -->

	<target name="clean-update-helper">
		<delete dir="${build.home}/update-${base.target}"/>
	</target>

	<target name="clean-tests-helper">
    	<property name="eclipse.home" value="${tools.home}/test-${base.version}/eclipse" />
		<delete failonerror="false">
			<fileset dir="${eclipse.home}/configuration" includes="*.log" />
		</delete>
		<delete dir="${eclipse.home}/results" />
		<delete failonerror="false">
			<fileset dir="${eclipse.home}" includes="*tests*.xml" />
		</delete>
	</target>

	<!--- one time setup for test target environment -->
	<target name="provision-test" unless="base.exists">
		<!-- setup for download targets -->
		<property name="downloadsDir" value="${tools.home}"/> 

		<!-- extract sdk for building -->
		<mkdir dir="${base.home}" />
		<install-into-base url="${base.url}" exists="eclipse"/>
		<install-into-base url="${base.url.test}" exists="eclipse/plugins/org.eclipse.test_3.2.0"/>
		<install-into-base url="${eclipse.url.derby}" exists="eclipse/plugins/org.apache.derby.core_10.4.2" unpackDest="${base.home}/eclipse"/>
		<replaceregexp file="${base.home}/eclipse/plugins/org.apache.derby.core_10.4.2/plugin.xml"
			match="org.apache.derby.core" replace="org.apache.derby" byline="true"/>
		<install-into-base url="${base.url.swtbot}" exists="eclipse/plugins/org.eclipse.swtbot.eclipse.junit4.headeless_2.0.0.${swtbot.rev}"/>
		<delete includeemptydirs="true">
			<fileset dir="${base.home}/eclipse">
				<include name="plugins/org.eclipse.swtbot*junit3*/**"/>
				<include name="plugins/org.junit_3.8.2*/**"/>
				<include name="plugins/org.junit4_4.3.1*/**"/>
				<include name="plugins/org.junit4_4.5.0*/**"/>
			</fileset>			
		</delete>
		
		<!-- replace org.junit with a org.junit4 making both plug-ins export identical classes to support
			 running SWTbot tests on JUnit4 mixed with legacy JUnit3 tests --> 
		<dirname property="functions.basedir" file="${ant.file.functions}"/>
		<!--
		<delete>
			<fileset dir="${base.home}/eclipse">
				<include name="plugins/org.junit*/**"/>
			</fileset>			
		</delete>
		<copy todir="${base.home}/eclipse/plugins">
			<fileset dir="${functions.basedir}/tools">
				<include name="org.junit*"/>
			</fileset>			
		</copy>
		-->
		
		<touch file="${base.home}/.provisioned"/>
	</target>

	<target name="tests-helper-init">
		<init-base activity="test"/>
		
    	<property name="eclipse.home" value="${base.home}/eclipse" />
  	    <condition property="install.dir" value="${eclipse.home}" else="${eclipse.home}/dropins/test"><equals arg1="${base.target}" arg2="3.3"/></condition>

		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${eclipse.home}">
				<include name="dropins/test*/**"/>
			</fileset>
		</delete>

		<antcall target="install-tests-helper-performance-tests"/>
		<available property="dependencies.test.exists" file="${basedir}/config/test-dependencies"/>
	</target>

	<target name="install-tests-dependencies" if="dependencies.test.exists" unless="skipUpdate">
		<dirname property="functions.basedir" file="${ant.file.functions}"/>
		<copy todir="${build.home}/update-${base.target}/plugins">
			<fileset dir="${functions.basedir}/tools">
				<include name="org.junit*"/>
			</fileset>
		</copy>
  	    <antcall target="publish-feature">
  	    	<param name="feature" value="dependencies.test"/>
			<param name="version" value="1.0.0.${qualifier}"/>
			<param name="featureDir" value="${basedir}/config/test-dependencies"/>
		</antcall>
		<install-feature-into-base featureId="dependencies.test"/>
	</target>
		
	<target name="install-tests-bundles">
		<available property="dist.exists" file="${build.home}/${base.target}/${build.dist}"/>
		<fail message="${build.home}/${base.target}/${build.dist} does not exist, try running 'build'" unless="dist.exists"/>
		
		<!-- copy build features to eclipse directory -->
		<unzip dest="${install.dir}">
			<fileset dir="${build.home}/${base.target}/${build.dist}">
				<include name="*.zip"/>
				<exclude name="*sdk*"/>
			</fileset>
		</unzip>
	</target>

	<target name="install-tests-helper-performance-tests" if="build.replacePerformanceTestPlugin">
		<!-- replace performance plug-in with patched version from test feature -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${base.home}/eclipse">
				<include name="plugins/org.eclipse.test.performance*/**"/>
			</fileset>
		</delete>
	</target>
	
	<!-- clean test environment before every run to ensure that Eclipse picks up content in dropins --> 
	<target name="tests-helper" depends="clean-test-tools-helper,tests-helper-init,install-tests-dependencies,install-tests-bundles,pre-tests">
		<init-basebuilder/>
    	<path id="library.id"> 
    		<fileset dir="${base.home}/eclipse/plugins">
            	<include name="org.eclipse.test_*/library.xml"/>
          	</fileset>
    	</path> 
    	<property name="library" refid="library.id"/>
    	<path id="swtbot.library.id"> 
    		<fileset dir="${base.home}/eclipse/plugins">
            	<include name="org.eclipse.swtbot.eclipse.junit4.headless_*/library.xml"/>
          	</fileset>
    	</path> 
    	<property name="swtbot.library" refid="swtbot.library.id"/>
		<dirname property="functions.basedir" file="${ant.file.functions}"/>
		<condition property="build.perf.qualifier" value="${build.baseline.prefix}_${time}" else="${qualifier}"><isset property="build.perf.baseline"/></condition>
		<condition property="build.perf.assertAgainst" value="" else="-Declipse.perf.assertAgainst=build=${build.baseline}"><isset property="build.perf.baseline"/></condition>

		<exec-eclipse timeout="${build.test.timeout}" activity="${test.target}-tests">
    		<arg value="-buildfile"/>
    		<arg value="${functions.basedir}/test.xml"/>
    		<arg value="-Dos=${build.os}"/>
    		<arg value="-Dws=${build.ws}"/>
    		<arg value="-Darch=${build.arch}"/>
    		<arg value="-Declipse-home=${base.home}/eclipse"/>    		
    		<arg value="-Dlibrary-file=${library}"/>
			<arg value="-Dswtbot-library-file=${swtbot.library}"/>
    		<arg value="-Dplugin-name=${test.plugin}"/>
    		<arg value="-Dclassname=${test.classname}"/>
    		<arg value="-DextraVMargs= 
    	    -ea
    		-Xmx384m
    		-XX:MaxPermSize=128m
    	    -Declipse.perf.dbloc=${build.db} 
    	    -Declipse.perf.config=build=${build.perf.qualifier};config=${build.host}-${base.target};jvm=sun
    		${build.perf.assertAgainst}
    	    ${build.extraTestArgs}" />
    		<arg value="${test.target}"/>
		</exec-eclipse>

		<copy todir="${build.results}/test-${base.target}">
			<fileset dir="${base.home}/eclipse/results"/>
			<fileset dir="${base.home}/eclipse">
				<include name="screenshots/*"/>
			</fileset>
		</copy>
		
		<antcall target="post-tests"/>
    </target>
	
	<target name="standalone-tests-helper-init">
    	<property name="install.dir" value="${build.home}/${base.target}/standalone-tests" />
		<delete dir="${install.dir}"/>
		<mkdir dir="${install.dir}"/>
		
    	<antcall target="install-tests-bundles"/>
	</target>

	<target name="standalone-tests-helper" depends="standalone-tests-helper-init,pre-standalone-tests">
		<init-basebuilder/>
		
		<!-- pick up all jared and extracted plug-ins --> 
		<path id="tests.classpath">
			<fileset dir="${install.dir}">
				<include name="**/*.jar"/>
				<exclude name="**/*ui*.jar"/>
			</fileset>
			<dirset dir="${install.dir}/plugins">
				<include name="*"/>
				<exclude name="*ui*"/>
			</dirset>
			<fileset dir="${base.builder.home}/eclipse/plugins">
				<include name="org.junit_*/junit.jar"/>
				<include name="org.eclipse.core.jobs_*.jar"/>
				<include name="org.eclipse.core.net_*.jar"/>
				<include name="org.eclipse.core.runtime_*.jar"/>
				<include name="org.eclipse.equinox.common_*.jar"/>
				<include name="org.eclipse.equinox.security_*.jar"/>
				<include name="org.eclipse.osgi_*.jar"/>
			</fileset>
		</path>
		
		<property name="output.dir" value="${build.results}/test-${base.target}"/>
		<mkdir dir="${output.dir}"/>
		
		<echo message="Testing standalone ${version}.${qualifier}" />
		<junit printsummary="yes" haltonfailure="no" 
			failureproperty="junit_test_failed" fork="true" forkmode="once" maxmemory="256m">
			<classpath>
				<path refid="tests.classpath"/>
			</classpath>
			<syspropertyset>
				<propertyref prefix="build.test.standalone.properties."/>
				<mapper type="glob" from="build.test.standalone.properties.*" to="*"/>
			</syspropertyset>
			<jvmarg line="${build.extraTestArgs}"/>
			<formatter type="xml" />
			<test todir="${output.dir}" name="${build.test.standalone.suite}"/>
		</junit>
    </target>

	<!-- ===================================================================== -->
	<!-- report helper targets -->
	<!-- ===================================================================== -->

	<target name="report-helper-init">
		<property name="results.home" value="${build.results}/test-${base.target}" />
		<mkdir dir="${results.home}" />
	</target>
	
	<target name="report-helper" depends="report-helper-init,pre-report">
		<!-- transform Eclipse unit tests with custom style sheets -->
		<xslt style="${basedir}/scripts/junit.xsl" basedir="${results.home}" excludes="TEST-*" includes="*Tests.xml" destdir="${results.home}" />
		<!-- annotate test output with test fixture names -->
		<xslt force="true" style="${basedir}/scripts/test-fixture.xsl" basedir="${results.home}" includes="*Tests.xml" destdir="${build.results}/test-results" extension="-${base.target}.xml" />
		<!-- annotate test output with base version -->
		<antcall target="report-helper-annotate-suite"/>
		<antcall target="post-report"/>
	</target>

	<target name="report-helper-annotate-suite" if="test.annotateReport">
		<!-- move existing files to temp directories for processing -->
		<delete dir="${build.results}/test-results/temp"/>
		<mkdir dir="${build.results}/test-results/temp"/>
		<move todir="${build.results}/test-results/temp">
			<fileset dir="${build.results}/test-results" includes="*-${base.target}.xml"/>
		</move>
		<xslt style="${basedir}/scripts/test-suite.xsl" basedir="${build.results}/test-results/temp" includes="*-${base.target}.xml" destdir="${build.results}/test-results" extension=".xml">
			<param name="append" expression="@e${base.target}"/>
		</xslt>
		<delete dir="${build.results}/test-results/temp"/>
	</target>
		
	<target name="performance-report" depends="init">
		<condition property="build.perf.qualifier" value="${build.baseline}" else="${qualifier}"><isset property="build.perf.baseline"/></condition>

		<echo message="Creating performance test report for ${version}.${qualifier}" />
		<exec-eclipse activity="performance-report" application="org.eclipse.test.performance.ui.resultGenerator" 
			extravmargs="-Declipse.perf.dbloc=${build.db}">
    		<arg value="-baseline"/>
    		<arg value="${build.baseline}"/>
    		<arg value="-baseline.prefix"/>
    		<arg value="${build.baseline.prefix}"/>
    		<arg value="-current"/>
    		<arg value="${build.perf.qualifier}"/>
    		<arg value="-config"/>
    		<arg value="${build.configs}"/>
    		<arg value="-config.properties"/>
    		<arg value="${build.configs.properties}"/>
			<arg value="-components"/>
			<arg value="${build.components}"/>
    		<arg value="-jvm"/>
    		<!-- Perfomance reports use hard-coded jvm value <arg value="${java.version}"/> -->
			<arg value="sun"/>
    		<arg value="-output"/>
    		<arg value="${build.results}/performance"/>
    		<arg value="-dataDir"/>
    		<arg value="${build.home}/performance-data"/>
    		<arg value="-print"/>
    		<arg value="-scenario.pattern"/>
    		<arg value="${build.scenario}%"/>
		</exec-eclipse>
    </target>

	<!-- ===================================================================== -->
	<!-- install helper targets -->
	<!-- ===================================================================== -->

	<target name="uninstall-bundle-check">
    	<path id="path.id"> 
    		<fileset dir="${base.home}/eclipse/features">
            	<include name="${featureId}_*/feature.xml"/>
          	</fileset>
    	</path> 
    	<property name="path" refid="path.id"/>
		<condition property="bundle.isinstalled" value="true"><not><equals arg1="${path}" arg2=""/></not></condition>
	</target>

	<target name="uninstall-bundle" depends="uninstall-bundle-check" if="bundle.isinstalled">
		<fail message="Require property 'base.home' is not set" unless="base.home"/>
		<property file="${base.home}/eclipse/configuration/config.ini" prefix="base.config"/>
		
		<echo message="Uninstalling ${featureId}"/>
		<exec-eclipse activity="install-bundle" application="org.eclipse.equinox.p2.director"
			 extravmargs="-Declipse.p2.data.area=${base.home}/eclipse/p2 -Declipse.p2.MD5Check=false" failonerror="false">
    		<arg value="-metadataRepository"/>
    		<arg value="${updateSite},${base.sites}"/>
    		<arg value="-artifactRepository"/>
    		<arg value="${updateSite},${base.sites}"/>
			<arg value="-uninstallIU"/>
			<arg value="${featureId}.feature.group"/>
			<arg value="-profile"/>
			<arg value="${base.config.eclipse.p2.profile}"/>
			<arg value="-destination"/>
			<arg value="${base.home}/eclipse"/>
		</exec-eclipse>
	</target>
		
	<target name="install-bundle" depends="uninstall-bundle">
		<fail message="Require property 'base.home' is not set" unless="base.home"/>
		<property file="${base.home}/eclipse/configuration/config.ini" prefix="base.config"/>
		
		<echo message="Installing ${featureId}"/>
		<exec-eclipse activity="install-bundle" application="org.eclipse.equinox.p2.director"
			 extravmargs="-Declipse.p2.data.area=${base.home}/eclipse/p2 -Declipse.p2.MD5Check=false">
    		<arg value="-metadataRepository"/>
    		<arg value="${updateSite},${base.sites}"/>
    		<arg value="-artifactRepository"/>
    		<arg value="${updateSite},${base.sites}"/>
			<arg value="-installIU"/>
			<arg value="${featureId}.feature.group"/>
			<arg value="-profile"/>
			<arg value="${base.config.eclipse.p2.profile}"/>
			<arg value="-destination"/>
			<arg value="${base.home}/eclipse"/>
		</exec-eclipse>
	</target>
	
	<target name="install-bundle-helper-um">
		<fail message="Require property 'base.home' is not set" unless="base.home"/>
		
		<property name="output" value="${build.home}/update.properties"/>

		<antcall target="install-bundle-get-version-helper-um"/>
		<property file="${output}"/>
		
	    <condition property="failed"><contains string="${output}" substring="Command completed"/></condition>
		<fail message="Failed to download ${update.feature} from ${update.site}" if="failed"/>
		
		<available property="bundle.exists" file="${base.home}/features/${update.feature}_${update.version}"/>
		<antcall target="install-bundle-helper-install-um"/>		
	</target>
	
	<target name="install-bundle-get-version-helper-um" unless="update.version">
		<echo message="Checking version for ${update.feature}"/>
		<exec-eclipse activity="install" application="org.eclipse.update.core.standaloneUpdate"
			output="${output}">
    		<arg value="-command"/>
    		<arg value="search"/>
    		<arg value="-from"/>
    		<arg value="${update.site}"/>
		</exec-eclipse>
		
		<replaceregexp file="${output}" 
			match=".*${update.feature} (\S*).*"
		    replace="update.version=\1"
			flags="s"/>
	</target>
		
	<target name="install-bundle-helper-install-um" unless="bundle.exists">
		<echo message="Installing ${update.feature} ${update.version} into ${base.home}"/>
		<exec-eclipse activity="install" application="org.eclipse.update.core.standaloneUpdate">
			<arg value="-command"/>
			<arg value="install"/>
			<arg value="-from"/>
			<arg value="${update.site}"/>
			<arg value="-featureId"/>
			<arg value="${update.feature}"/>
			<arg value="-version"/>
			<arg value="${update.version}"/>
			<arg value="-to"/>
			<arg value="${base.home}"/>
		</exec-eclipse>
	</target>

	<target name="publish-feature">
		<mkdir dir="${build.home}/update-${base.target}/features"/>
			
		<delete dir="${build.home}/tmp/feature" failonerror="false"/>
 		<copy todir="${build.home}/tmp/feature">
    		<fileset dir="${featureDir}"/>
    		<filterset>
    			<filter token="VERSION" value="${version}"/>
    		</filterset>
    	</copy>
    			    	
		<delete file="${build.home}/update-${base.target}/features/${feature}_${version}.jar"/>
		<jar destfile="${build.home}/update-${base.target}/features/${feature}_${version}.jar" >
			<fileset dir="${build.home}/tmp/feature"/>
		</jar>
		<antcall target="generate-metadata">
			<param name="dir" value="${build.home}/update-${base.target}"/>
			<param name="name" value="Updates"/>
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- basebuilder targets -->
	<!-- ===================================================================== -->

	<target name="provision-basebuilder" unless="base.builder.exists">
		<!-- setup for download targets -->
		<property name="downloadsDir" value="${tools.home}"/> 

		<mkdir dir="${base.builder.home}" />
		<echo message="Getting basebuilder from CVS"/>
		<cvs cvsRoot=":pserver:anonymous@dev.eclipse.org:/cvsroot/eclipse"
			package="org.eclipse.releng.basebuilder"
			command="checkout -r R${basebuilder.version}"
			dest="${base.builder.home}"
			quiet="true" 
			failonerror="true" />
		<antcall target="get-build-dependencies-helper-svn"/>
		<move file="${base.builder.home}/org.eclipse.releng.basebuilder" tofile="${base.builder.home}/eclipse"/>
		<install-into-base url="${eclipse.url.derby}" exists="plugins/org.apache.derby.core_10.4.2" unpackDest="${base.builder.home}/eclipse"/>
		<replaceregexp file="${base.builder.home}/eclipse/plugins/org.apache.derby.core_10.4.2/plugin.xml"
			match="org.apache.derby.core" replace="org.apache.derby" byline="true"/>

		<!-- replace performance test tools with patched version -->
		<dirname property="functions.basedir" file="${ant.file.functions}"/>
		<delete includeemptydirs="true">
			<fileset dir="${base.builder.home}/eclipse">
				<include name="plugins/org.eclipse.test.performance*/**"/>
			</fileset>
		</delete>
		<copy todir="${base.builder.home}/eclipse/plugins">
			<fileset dir="${functions.basedir}/tools">
				<include name="org.eclipse.test.performance*/**"/>
			</fileset>
		</copy>

		<touch file="${base.builder.home}/.provisioned"/>
	</target>

	<target name="get-build-dependencies-helper-svn" if="eclipse.url.svn">
		<install-into-base url="${eclipse.url.svn}" exists="eclipse"/>
		<available property="svn.exists" file="${base.home}/org.eclipse.releng.basebuilder"/>
		<antcall target="get-build-dependencies-helper-svn-move"/>
	</target>

	<target name="get-build-dependencies-helper-svn-move" if="svn.exists">
		<move todir="${base.home}/eclipse" failonerror="false">
			<fileset dir="${base.home}/org.eclipse.releng.basebuilder">
				<include name="**/*"/>
			</fileset>
		</move>
		<delete dir="${base.home}/org.eclipse.releng.basebuilder" failonerror="false"/>
	</target>
		
	<!-- ===================================================================== -->
	<!-- other targets -->
	<!-- ===================================================================== -->

	<target name="fix-permissions">
		<chmod perm="g+w">
			<fileset dir="${dir}"/>
		</chmod>
		<!--
		<chgrp group="${dist.group}">
			<fileset dir="${target.dir}"/>
		</chgrp>
		-->
		<exec executable="/bin/chgrp" failonerror="false">
			<arg value="-R"/>
			<arg value="${dist.group}"/>
			<arg value="${dir}"/>
		</exec>
	</target>

	<target name="pack">
		<fail unless="dir">required parameter missing: dir</fail>
		
		<echo message="Packing update site in ${dir}" />
		<exec-eclipse activity="pack" application="org.eclipse.update.core.siteOptimizer">
			<arg value="-digestBuilder"/>
			<arg value="-digestOutputDir=${dir}"/>
			<arg value="-siteXML=${dir}/site.xml"/>
    		<arg value="-jarProcessor"/>
    		<arg value="-verbose"/>    		
    		<arg value="-processAll"/>
    		<arg value="-repack"/>
    		<arg value="-pack"/>
    		<arg value="-outputDir"/>
    		<arg value="${dir}"/>
    		<arg value="${dir}"/>
		</exec-eclipse>
    </target>

	<target name="generate-metadata">
		<fail unless="dir">required parameter missing: dir</fail>
		<fail unless="name">required parameter missing: name</fail>

		<!-- work around P2 bug that causes jars to get deleted when meta-data exists -->
		<delete>
			<fileset dir="${dir}">
				<include name="artifacts.*"/>
				<include name="content.*"/>
			</fileset>
		</delete>
		
		<echo message="Generating P2 meta-data for ${dir}" />
		<exec-eclipse activity="generate-metadata" application="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher">
	  		<arg value="-source"/>
    		<arg value="${dir}"/>
    		<arg value="-metadataRepository"/>
    		<arg value="file:${dir}"/>
    		<arg value="-artifactRepository"/>
    		<arg value="file:${dir}"/>
    		<arg value="-metadataRepositoryName"/>
    		<arg value="${name}"/>
    		<arg value="-artifactRepositoryName"/>
    		<arg value="${name}"/>
    		<arg value="-compress"/>
    		<arg value="-reusePackedFiles"/>
		</exec-eclipse>
		
		<antcall target="publish-categories"/>
    </target>

	<target name="publish-categories-check">
		<fail unless="dir">required parameter missing: dir</fail>
		<available property="site.exists" file="${dir}/site.xml"/>
	</target>
	
	<target name="publish-categories" depends="publish-categories-check" if="site.exists">		
		<exec-eclipse activity="publish-categories" application="org.eclipse.equinox.p2.publisher.CategoryPublisher">
			<arg value="-categoryDefinition"/>
			<arg value="file:${dir}/site.xml"/>
			<arg value="-metadataRepository"/>
			<arg value="file:${dir}"/>
			<arg value="-compress"/>
		</exec-eclipse>
	</target>
	
	<target name="packager">
		<init-basebuilder/>

    	<path id="pde.build.script.id"> 
    		<fileset dir="${base.builder.home}/eclipse/plugins">
            	<include name="org.eclipse.pde.build_*/scripts/package.xml"/>
          	</fileset>
    	</path> 
    	<property name="pde.build.script" refid="pde.build.script.id"/>
		
		<echo message="Packaging ${version}.${qualifier}" />
    	<exec-eclipse activity="packager">
    		<arg value="-buildfile"/>
    		<arg value="${pde.build.script}"/>
    		<arg value="-DpackagingInfo=${basedir}/packager"/>    		
		</exec-eclipse>
    </target>

	<target name="mirror-helper">
		<fail unless="from">required parameter missing: from</fail>
		<fail unless="to">required parameter missing: to</fail>

		<condition property="featureArg" value="-featureId ${featureId}" else=""><isset property="featureId"/></condition>

		<condition property="featureMessage" value="${featureId}" else="all features"><isset property="featureId"/></condition>
		<echo message="Mirroring ${featureMessage} from ${from} to ${to}" />
		<exec-eclipse activity="mirror" application="org.eclipse.update.core.standaloneUpdate">
    		<arg value="-command"/>
    		<arg value="mirror"/>
    		<arg value="-from"/>
    		<arg value="${from}"/>
    		<arg value="-to"/>
    		<arg value="${to}" />
    		<arg line="${featureArg}"/>
		</exec-eclipse>
    </target>

	<target name="ant-helper">
		<exec-eclipse activity="ant" application="org.eclipse.ant.core.antRunner">
    		<arg value="-buildfile"/>
    		<arg value="${buildfile}"/>
    		<arg value="${targets}"/>
    		<arg line="${extraArgs}"/>
		</exec-eclipse>
    </target>

	<target name="get-package-dependencies-helper">
		<property name="downloadsDir" value="${eclipse.base}"/> 

		<mkdir dir="${eclipse.base}/sdk-${eclipse.sdk.3.5}/delta-pack" />
		
		<basename property="file.delta-pack" file="${eclipse.url.delta-pack}"/>
		<antcall target="getBundle">
			<param name="file" value="${file.delta-pack}" />
			<param name="url" value="${eclipse.url.delta-pack}"/>
		</antcall>
		<antcall target="unpackBundle">
			<param name="file" value="${file.delta-pack}" />
			<param name="unpackDest" value="${eclipse.base}/sdk-${eclipse.sdk.3.5}/delta-pack"/>
			<param name="isUnpackedFile" value="${eclipse.base}/sdk-${eclipse.sdk.3.5}/delta-pack/eclipse"/>
		</antcall>
	</target>
	
	<target name="publish-product-helper" depends="get-package-dependencies-helper">
    	<property name="timeout" value="7200000" />
		<property name="application" value="org.eclipse.equinox.p2.publisher.ProductPublisher" />
    	<property name="eclipse.home" value="${eclipse.base}/sdk-${eclipse.sdk.3.5}/eclipse" />
		<property name="delta-pack.home" value="${eclipse.base}/sdk-${eclipse.sdk.3.5}/delta-pack/eclipse" />
		<property name="vmargs" value=" -Xms40m -Xmx256m"/>    	
    	<path id="pde.build.script.id"> 
    		<fileset dir="${eclipse.home}/plugins">
            	<include name="org.eclipse.pde.build_*/scripts/package.xml"/>
          	</fileset>
    	</path> 
    	<property name="pde.build.script" refid="pde.build.script.id"/>
		
		<echo message="Publishing ${productfile} to ${dir}" />
    	<java fork="true" dir="." timeout="${timeout}" logError="true" failonerror="true"  
    		classname="org.eclipse.core.launcher.Main">
	        <classpath>
	    		<fileset dir="${eclipse.home}/plugins">
	            	<include name="org.eclipse.equinox.launcher_*.jar"/>
	          	</fileset>
	        </classpath>
		    <jvmarg line="${vmargs}"/>
		    <arg value="-consolelog"/>
    		<arg value="-data"/>
    		<arg value="${build.home}/workspace"/>
		    <arg value="-application"/>
    		<arg value="${application}"/>
    		<arg value="-metadataRepository"/>
    		<arg value="file:${dir}"/>
    		<arg value="-artifactRepository"/>
    		<arg value="file:${dir}"/>
    		<arg value="-productFile"/>
    		<arg value="${productfile}"/>
    		<arg value="-append"/>
    		<arg value="-publishArtifacts" />
    		<arg value="-executables"/>
			<arg value="${delta-pack.home}/features/org.eclipse.equinox.executable_3.3.200.v20090521-1800-7M-Fm-FI3UouOe61h3BYGC"/>
    		<arg value="-flavor"/>
    		<arg value="tooling"/>
    		<arg value="-configs"/>
    		<arg value="win32.win32.x86,gtk.linux.x86,gtk.linux.x86_64,cocoa.macosx.x86,cocoa.macosx.x86_64,carbon.macosx.ppc"/>
		</java>
    </target>
	
</project>
