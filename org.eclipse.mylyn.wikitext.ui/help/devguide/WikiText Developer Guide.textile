h1. OverviewThis document provides detailed information for software developers that wish to include or use WikiText as part of their application.h2. WikiText APIWikiText follows Eclipse conventions with respect to package naming.  Classes that appear in packages with @internal@ in their name are not intended for use externally.Most API classes have good javadoc.  When using WikiText classes, expect them to behave according to their javadoc.  If you find somewhere where the javadoc is not clear, please "file a bug":#IssueTracking.h2. How It WorksThe markup parser uses regular expressions to parse wiki markup, converting the markup to XHTML or other outputs depending on the configured @DocumentBuilder@.h3. JFace ViewerThe WikiText JFace viewer extends the standard JFace source viewer. The WikiText JFace viewer uses the markup parser to convert the text to XHTML.  It then parses the XHTML and converts it to a standard unicode character sequence and a TextPresentation. It uses standard JFace techniques to apply styles to the rendered text and uses unicode character features such as newlines, tabs and bullet characters to make the text look as it is intended.As the wiki markup is converted to text with a TextPresentation an AnnotationModel is (optionally) constructed, such that the text viewer has access to annotations for the following:* Tags with id (from @<p id="some-id">@)* Anchor href (from @<a href="http://www.foo-bar.com">@)* Anchor name (from @<a name="foo-bar">@)* CSS classes* Titles (from @<acronym title="some title">@)The viewer can then present pop-ups (tool-tip hover information, for example), and handle in-document and out-of-document hyperlinks.The viewer implementation has the benefit of being lightweight compared to a browser and it supports standard viewer features such as text selection and clipboard copy.h4. JFace Viewer LimitationsThe following limitations apply to the JFace text-only markup rendering viewer. The limitations can be avoided by using the SWT Browser widget instead.Since the viewer is a text-only rendering solution for markup it cannot display advanced markup constructs such as tables.  Images can be displayed due to WikiText's custom painting.The viewer is also generally only useful for read-only usage, since the viewer does not maintain a mapping back to the original markup.Anchors (ie: hyperlinks) within the page are implemented. If you use footnotes, clicking on the footnote anchor will scroll the viewer to display the footnote text at the bottom.h2. Classpath and DependenciesWikiText is designed for use both within an Eclipse runtime, and stand-alone.h3. Within EclipseWikiText use within an Eclipse runtime is simple: simply add the desired WikiText bundles as dependencies to your plug-in project.  This is the recommended approach for Eclipse plug-ins and for RCP applications.h3. Stand-AloneStand-alone usage of WikiText is also possible.  To use WikiText outside of an Eclipse runtime, simply add the WikiText jar files to your classpath.  Note that stand-alone usage of WikiText is limited to the use of the markup parser framework and Ant tasks.Add the @org.eclipse.mylyn.wikitext.core*.jar@ to your classpath, and at least one the following language-specific jars:* @org.eclipse.mylyn.wikitext.confluence.core*.jar@* @org.eclipse.mylyn.wikitext.mediawiki.core*.jar@* @org.eclipse.mylyn.wikitext.textile.core*.jar@* @org.eclipse.mylyn.wikitext.tracwiki.core*.jar@* @org.eclipse.mylyn.wikitext.twiki.core*.jar@h1. Using The WikiText ParserWikiText provides a parser framework for parsing lightweight markup languages (wiki markup).  The parser framework can output HTML, DITA, DocBook, and Eclipse Help directly, or integrators can extend @DocumentBuilder@ to output other formats.h2. Simple exampleTo convert Textile wiki markup to HTML:bc. MarkupParser markupParser = new MarkupParser();markupParser.setMarkupLanaguage(new TextileLanguage());String htmlContent = markupParser.parseToHtml(markupContent);To convert MediaWiki wiki markup to HTML:bc. MarkupParser markupParser = new MarkupParser();markupParser.setMarkupLanaguage(new MediaWikiLanguage());String htmlContent = markupParser.parseToHtml(markupContent);h3. ServiceLocatorYour code may need to handle multiple markup languages or you may wish to eliminate compile-time dependencies on a specific markup language.  The @ServiceLocator@ can obtain markup languages by name:bc. ServiceLocator.getInstance().getMarkupLanguage("Textile")Other markup languages can be obtained by changing @"Textile"@ to another markup language name.  Valid markup language names include:* Confluence* MediaWiki* Textile* TracWiki* TWikih2. Advance parser usageThe @MarkupParser@ emits content to a @DocumentBuilder@ in order to create HTML or other output.  To control the output more closely instantiate the @DocumentBuilder@ of choice and configure it before it is used.  In this example the @HtmlDocumentBuilder@ is configured to avoid creating the @<html>@ and @<body>@ tags:bc.. StringWriter writer = new StringWriter();HtmlDocumentBuilder builder = new HtmlDocumentBuilder(writer);// avoid the <html> and <body> tags builder.setEmitAsDocument(false);MarkupParser parser = new MarkupParser(new TextileLanguage());parser.setBuilder(builder);parser.parse(markupContent);String htmlContent = writer.toString();h2. Adding CSS to the generated HTMLCSS stylesheets can be embedded directly or referenced within your HTML:bc.. HtmlDocumentBuilder builder = new HtmlDocumentBuilder(writer);// Add a CSS stylesheet as <link type="text/css" rel="stylesheet" href="styles/test.css"/>builder.addCssStylesheet("styles/test.css");  // Add a CSS stylesheet as <style type="text/css">builder.addCssStylesheet(new File("/path/to/file.css"));h1. WikiText and the UIWikiText can be used to integrate wiki markup capabilities into your application user interface.h2. WikiText JFace ViewerWikiText provides a JFace @SourceViewer@ for displaying wiki markup without having to use a @Browser@ widget. bc.. MarkupViewer viewer = new MarkupViewer(folder, null, SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);viewer.setMarkupLanguage(markupLanguage);MarkupViewerConfiguration configuration = new MarkupViewerConfiguration(viewer);viewer.configure(configuration);viewer.getTextWidget().setEditable(false);viewer.setMarkup(markup);h2. WikiText and BrowserWikiText can be used to display wiki markup in an SWT @Browser@ widget:bc.. Browser browser = new Browser(folder, SWT.NONE);MarkupParser markupParser = new MarkupParser();markupParser.setMarkupLanaguage(new TextileLanguage());String htmlContent = markupParser.parseToHtml(markupContent);		browser.setText(htmlContent);h1. New Markup LanguagesWikiText is designed to be extended to support new markup languages.  To add a markup language take the following steps:# Extend @org.eclipse.mylyn.wikitext.core.parser.markup.MarkupLanguage@ using one of the existing markup language classes as an example# Add to your markup language class the blocks, phrases and replacement tokens that are to be part of your language# Add to your jar a Java service @META-INF/services/org.eclipse.mylyn.wikitext.core.parser.markup.MarkupLanguage@# If it's to be used in Eclipse, register your markup language using the @org.eclipse.mylyn.wikitext.core.markupLanguage@ extension point. You're most likely to be successful if you use one of the existing WikiText markup language plug-ins as an example.  A good starting point is the @org.eclipse.mylyn.wikitext.textile.core@ plug-in.h1. ContributingWikiText is evolving as a direct result of user contributions.  Please feel free to contribute by* "posting a bug":#IssueTracking* "submitting a patch":#IssueTrackingFor more information about contributing please see the "Mylyn Contributor Reference":http://wiki.eclipse.org/index.php/Mylyn/Contributor_Reference.h2(#IssueTracking). Issue TrackingIssues are tracked in "Eclipse Bugzilla":https://bugs.eclipse.org/bugs/ under the *Mylyn* project, *WikiText* component.  Please feel free to submit bugs, enhancement requests and patches.